{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\N\\\\ecom\\\\src\\\\context\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useCallback } from 'react';\n\n// Create a cart context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\n\n// Define initial state for the cart\nconst initialCartState = [];\n\n// Create a cart reducer to handle cart actions\nconst cartReducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_TO_CART':\n      return [...state, action.payload];\n    case 'REMOVE_FROM_CART':\n      return state.filter(item => item.id !== action.payload.id);\n    case 'CLEAR_CART':\n      return [];\n    default:\n      return state;\n  }\n};\n\n// Create a CartProvider component to provide cart state and functions to child components\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [cart, dispatch] = useReducer(cartReducer, initialCartState);\n  const addToCart = useCallback(item => {\n    dispatch({\n      type: 'ADD_TO_CART',\n      payload: item\n    });\n  }, []);\n  const removeFromCart = useCallback(item => {\n    dispatch({\n      type: 'REMOVE_FROM_CART',\n      payload: item\n    });\n  }, []);\n  const clearCart = useCallback(() => {\n    dispatch({\n      type: 'CLEAR_CART'\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addToCart,\n      removeFromCart,\n      clearCart\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n// Create a custom hook to use the cart context\n_s(CartProvider, \"/eD+B9YozdSc04YI5WtTytIf/i4=\");\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n};\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useCallback","jsxDEV","_jsxDEV","CartContext","initialCartState","cartReducer","state","action","type","payload","filter","item","id","CartProvider","children","_s","cart","dispatch","addToCart","removeFromCart","clearCart","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/N/ecom/src/context/CartContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useCallback } from 'react';\r\n\r\n// Create a cart context\r\nconst CartContext = createContext();\r\n\r\n// Define initial state for the cart\r\nconst initialCartState = [];\r\n\r\n// Create a cart reducer to handle cart actions\r\nconst cartReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'ADD_TO_CART':\r\n      return [...state, action.payload];\r\n    case 'REMOVE_FROM_CART':\r\n      return state.filter(item => item.id !== action.payload.id);\r\n    case 'CLEAR_CART':\r\n      return [];\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Create a CartProvider component to provide cart state and functions to child components\r\nexport const CartProvider = ({ children }) => {\r\n  const [cart, dispatch] = useReducer(cartReducer, initialCartState);\r\n\r\n  const addToCart = useCallback(item => {\r\n    dispatch({ type: 'ADD_TO_CART', payload: item });\r\n  }, []);\r\n\r\n  const removeFromCart = useCallback(item => {\r\n    dispatch({ type: 'REMOVE_FROM_CART', payload: item });\r\n  }, []);\r\n\r\n  const clearCart = useCallback(() => {\r\n    dispatch({ type: 'CLEAR_CART' });\r\n  }, []);\r\n\r\n  return (\r\n    <CartContext.Provider value={{ cart, addToCart, removeFromCart, clearCart }}>\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\n// Create a custom hook to use the cart context\r\nexport const useCart = () => {\r\n  const context = useContext(CartContext);\r\n  if (!context) {\r\n    throw new Error('useCart must be used within a CartProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,UAAU,EAAEC,WAAW,QAAQ,OAAO;;AAEjF;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;;AAEnC;AACA,MAAMO,gBAAgB,GAAG,EAAE;;AAE3B;AACA,MAAMC,WAAW,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACrC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,aAAa;MAChB,OAAO,CAAC,GAAGF,KAAK,EAAEC,MAAM,CAACE,OAAO,CAAC;IACnC,KAAK,kBAAkB;MACrB,OAAOH,KAAK,CAACI,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKL,MAAM,CAACE,OAAO,CAACG,EAAE,CAAC;IAC5D,KAAK,YAAY;MACf,OAAO,EAAE;IACX;MACE,OAAON,KAAK;EAChB;AACF,CAAC;;AAED;AACA,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,QAAQ,CAAC,GAAGlB,UAAU,CAACM,WAAW,EAAED,gBAAgB,CAAC;EAElE,MAAMc,SAAS,GAAGlB,WAAW,CAACW,IAAI,IAAI;IACpCM,QAAQ,CAAC;MAAET,IAAI,EAAE,aAAa;MAAEC,OAAO,EAAEE;IAAK,CAAC,CAAC;EAClD,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMQ,cAAc,GAAGnB,WAAW,CAACW,IAAI,IAAI;IACzCM,QAAQ,CAAC;MAAET,IAAI,EAAE,kBAAkB;MAAEC,OAAO,EAAEE;IAAK,CAAC,CAAC;EACvD,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMS,SAAS,GAAGpB,WAAW,CAAC,MAAM;IAClCiB,QAAQ,CAAC;MAAET,IAAI,EAAE;IAAa,CAAC,CAAC;EAClC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEN,OAAA,CAACC,WAAW,CAACkB,QAAQ;IAACC,KAAK,EAAE;MAAEN,IAAI;MAAEE,SAAS;MAAEC,cAAc;MAAEC;IAAU,CAAE;IAAAN,QAAA,EACzEA;EAAQ;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAAX,EAAA,CAtBaF,YAAY;AAAAc,EAAA,GAAZd,YAAY;AAuBzB,OAAO,MAAMe,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGhC,UAAU,CAACK,WAAW,CAAC;EACvC,IAAI,CAAC2B,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}