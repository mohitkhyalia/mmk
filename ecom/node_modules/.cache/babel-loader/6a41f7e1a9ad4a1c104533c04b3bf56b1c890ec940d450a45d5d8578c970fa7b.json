{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\N\\\\ecom\\\\src\\\\context\\\\UserContext.js\",\n  _s = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport Cookies from 'js-cookie';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/createContext();\nexport function useUser() {\n  _s();\n  return useContext(UserContext);\n}\n_s(useUser, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function UserProvider({\n  children\n}) {\n  _s3();\n  var _s2 = $RefreshSig$();\n  const [useriD, setUseriD] = useState(null);\n  const [userData, setUserData] = useState();\n  const [successMessage, setSuccessMessage] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const updateData = udata => {\n    _s2();\n    const jsonData = JSON.stringify(udata);\n    setUseriD(jsonData.id);\n    useEffect(() => {\n      // Fetch user data based on the user ID you want to update\n      fetch(`/api/users/${useriD}`).then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n        throw new Error('Network response was not ok.');\n      }).then(data => {\n        setUserData(data); // Populate the form with the user's current data\n      }).catch(error => {\n        console.error('Error fetching user data:', error);\n      });\n    }, []);\n    const newUser = ndata => {\n      const jsonData = JSON.stringify(ndata);\n      fetch('/api/users', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: jsonData\n      }).then(response => {\n        if (response.ok) {\n          return response.json(); // Parse the response JSON if needed\n        }\n\n        throw new Error('Network response was not ok.');\n      }).then(data => {\n        // Handle success (e.g., display a success message)\n        console.log('User added successfully:', data);\n      }).catch(error => {\n        // Handle errors (e.g., display an error message)\n        console.error('Error adding user:', error);\n      });\n    };\n    const updates = () => {\n      // Make an HTTP PUT request to update the user data\n      fetch(`/api/users/${userData.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: jsonData\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n        throw new Error('Network response was not ok.');\n      }).then(data => {\n        setSuccessMessage('User data updated successfully');\n      }).catch(error => {\n        setErrorMessage('Error updating user data');\n        console.error('Error updating user data:', error);\n      });\n    };\n  };\n  _s2(updateData, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      updateData,\n      newUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n}\n_s3(UserProvider, \"qQWR3AKbliwkAFaiGb/nlm5NJ8k=\");\n_c = UserProvider;\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","Cookies","jsxDEV","_jsxDEV","UserContext","useUser","_s","UserProvider","children","_s3","_s2","$RefreshSig$","useriD","setUseriD","userData","setUserData","successMessage","setSuccessMessage","errorMessage","setErrorMessage","updateData","udata","jsonData","JSON","stringify","id","fetch","then","response","ok","json","Error","data","catch","error","console","newUser","ndata","method","headers","body","log","updates","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/N/ecom/src/context/UserContext.js"],"sourcesContent":["import React, { createContext, useContext, useState ,useEffect } from 'react';\r\nimport Cookies from 'js-cookie';\r\nconst UserContext = createContext();\r\n\r\nexport function useUser() {\r\n  return useContext(UserContext);\r\n}\r\nexport function UserProvider({ children }) {\r\n\r\n    const [useriD, setUseriD] = useState(null);\r\n    const [userData, setUserData] = useState()\r\n    const [successMessage, setSuccessMessage] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n    const updateData=(udata) =>{\r\n        const jsonData = JSON.stringify(udata);\r\n        setUseriD(jsonData.id)\r\n    \r\n\r\n    useEffect(() => {\r\n        // Fetch user data based on the user ID you want to update\r\n        fetch(`/api/users/${useriD}`)\r\n          .then((response) => {\r\n            if (response.ok) {\r\n              return response.json();\r\n            }\r\n            throw new Error('Network response was not ok.');\r\n          })\r\n          .then((data) => {\r\n            setUserData(data); // Populate the form with the user's current data\r\n          })\r\n          .catch((error) => {\r\n            console.error('Error fetching user data:', error);\r\n          });\r\n      }, []);\r\n\r\n\r\n      const newUser=(ndata) =>{\r\n        const jsonData = JSON.stringify(ndata);\r\n    \r\n        fetch('/api/users', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: jsonData,\r\n        })\r\n        .then((response) => {\r\n          if (response.ok) {\r\n            return response.json(); // Parse the response JSON if needed\r\n          }\r\n          throw new Error('Network response was not ok.');\r\n        })\r\n        .then((data) => {\r\n          // Handle success (e.g., display a success message)\r\n          console.log('User added successfully:', data);\r\n        })\r\n        .catch((error) => {\r\n          // Handle errors (e.g., display an error message)\r\n          console.error('Error adding user:', error);\r\n        });\r\n    \r\n      }\r\n\r\n      const updates = ()=>{\r\n            // Make an HTTP PUT request to update the user data\r\n    fetch(`/api/users/${userData.id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: jsonData,\r\n      })\r\n        .then((response) => {\r\n          if (response.ok) {\r\n            return response.json();\r\n          }\r\n          throw new Error('Network response was not ok.');\r\n        })\r\n        .then((data) => {\r\n          setSuccessMessage('User data updated successfully');\r\n        })\r\n        .catch((error) => {\r\n          setErrorMessage('Error updating user data');\r\n          console.error('Error updating user data:', error);\r\n        });\r\n    };\r\n}\r\n    \r\n\r\n      return (\r\n        <UserContext.Provider value={{ updateData,newUser}}>\r\n          {children}\r\n        </UserContext.Provider>\r\n      );\r\n\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}