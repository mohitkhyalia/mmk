{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\N\\\\ecom\\\\src\\\\context\\\\UserContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/createContext();\nexport function useUser() {\n  _s();\n  return useContext(UserContext);\n}\n_s(useUser, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function UserProvider({\n  children\n}) {\n  _s2();\n  const [useriD, setUseriD] = useState(null);\n  const [successMessage, setSuccessMessage] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const updateData = udata => {\n    setUseriD(udata.id);\n  };\n  const newUser = ndata => {\n    const jsonData = JSON.stringify(ndata);\n    fetch('/api/users', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: jsonData\n    }).then(response => {\n      if (response.ok) {\n        console.log(response);\n        return response.json(); // Parse the response JSON if needed\n      }\n\n      throw new Error('Network response was not ok.');\n    }).then(data => {\n      // Handle success (e.g., display a success message)\n      console.log('User added successfully:', data);\n    }).catch(error => {\n      // Handle errors (e.g., display an error message)\n      console.error('Error adding user:', error);\n    });\n  };\n  const updates = udata => {\n    const jsonData = JSON.stringify(udata);\n    console.log(udata);\n    // Make an HTTP PUT request to update the user data\n    fetch(`/api/users/${useriD}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: jsonData\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n      throw new Error('Network response was not ok.');\n    }).then(data => {\n      setSuccessMessage('User data updated successfully');\n    }).catch(error => {\n      setErrorMessage('Error updating user data');\n      console.error('Error updating user data:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      updateData,\n      newUser,\n      updates,\n      successMessage,\n      errorMessage\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n_s2(UserProvider, \"mPTJL5mL9Nopum5FNSGJWMAvTbY=\");\n_c = UserProvider;\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","UserContext","useUser","_s","UserProvider","children","_s2","useriD","setUseriD","successMessage","setSuccessMessage","errorMessage","setErrorMessage","updateData","udata","id","newUser","ndata","jsonData","JSON","stringify","fetch","method","headers","body","then","response","ok","console","log","json","Error","data","catch","error","updates","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/N/ecom/src/context/UserContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\n\r\nconst UserContext = createContext();\r\n\r\nexport function useUser() {\r\n  return useContext(UserContext);\r\n}\r\n\r\nexport function UserProvider({ children }) {\r\n  const [useriD, setUseriD] = useState(null);\r\n  const [successMessage, setSuccessMessage] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  const updateData = (udata) => {\r\n    setUseriD(udata.id);\r\n  };\r\n\r\n  const newUser = (ndata) => {\r\n    const jsonData = JSON.stringify(ndata);\r\n\r\n    fetch('/api/users', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: jsonData,\r\n    })\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          console.log(response);\r\n          return response.json(); // Parse the response JSON if needed\r\n        }\r\n        throw new Error('Network response was not ok.');\r\n      })\r\n      .then((data) => {\r\n        // Handle success (e.g., display a success message)\r\n        console.log('User added successfully:', data);\r\n      })\r\n      .catch((error) => {\r\n        // Handle errors (e.g., display an error message)\r\n        console.error('Error adding user:', error);\r\n      });\r\n  };\r\n\r\n  const updates = (udata) => {\r\n    const jsonData = JSON.stringify(udata);\r\n    console.log(udata);\r\n    // Make an HTTP PUT request to update the user data\r\n    fetch(`/api/users/${useriD}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: jsonData,\r\n    })\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          return response.json();\r\n        }\r\n        throw new Error('Network response was not ok.');\r\n      })\r\n      .then((data) => {\r\n        setSuccessMessage('User data updated successfully');\r\n      })\r\n      .catch((error) => {\r\n        setErrorMessage('Error updating user data');\r\n        console.error('Error updating user data:', error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <UserContext.Provider value={{ updateData, newUser, updates, successMessage, errorMessage }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}